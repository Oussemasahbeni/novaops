name: novaops
services:
  config-server:
    build:
      context: config-server
    container_name: novaops-config-server
    env_file: ./.env
    ports:
      - "8888:8888"
    networks:
      - novaops-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8888/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  discovery-server:
    build:
      context: eureka-server
    container_name: novaops-eureka-server
    ports:
      - "8761:8761"
    env_file: ./.env
    networks:
      - novaops-network
    restart: unless-stopped
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8761/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  gateway:
    build:
      context: gateway
    container_name: novaops-gateway
    ports:
      - "8222:8222"
    env_file: ./.env
    networks:
      - novaops-network
    depends_on:
      discovery-server:
        condition: service_healthy
  #      user-service:
  #        condition: service_healthy

  user-service:
    build:
      context: user-service
    container_name: novaops-user-service
    ports:
      - "8081:8081"
    env_file: ./.env
    networks:
      - novaops-network
    depends_on:
      config-server:
        condition: service_healthy
      #      discovery-server:
      #        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      keycloak:
        condition: service_started

  postgres:
    container_name: postgres-sql-novaops
    image: postgres:17-alpine
    env_file: ./.env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: novaops
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - novaops-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    container_name: redis-novaops
    image: redis:8.0.2-alpine
    ports:
      - "6379:6379"
    networks:
      - novaops-network
    volumes:
      - ./redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    container_name: keycloak-novaops
    image: quay.io/keycloak/keycloak:26.2.5
    ports:
      - "9090:8080"
    env_file: ./.env
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${DB_USERNAME}
      KC_DB_PASSWORD: ${DB_PASSWORD}
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KAFKA_TOPIC: keycloak-events
      KAFKA_CLIENT_ID: keycloak
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - novaops-network
    volumes:
      - ./keycloak-providers/jars:/opt/keycloak/providers
      - ./keycloak-providers/realm:/opt/keycloak/data/import
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    command: [ "start-dev", "--import-realm" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ready" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 45s

  kafka:
    image: confluentinc/cp-kafka:7.9.2
    container_name: kafka-novaops
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - novaops-network
    volumes:
      - ./kafka-data:/tmp/kraft-combined-logs

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-novaops
    ports:
      - "8084:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - novaops-network

  mail-dev:
    container_name: mail-dev-novaops
    image: maildev/maildev
    ports:
      - "1080:1080" # Web UI
      - "1025:1025" # SMTP Port
    networks:
      - novaops-network

networks:
  novaops-network:
    driver: bridge

volumes:
  postgres:
    driver: local
  redis-data:
    driver: local